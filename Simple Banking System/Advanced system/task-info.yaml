type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/logincabinet/dataonscreen/WindowFactory.java
  visible: true
  text: |
    package banking.logincabinet.dataonscreen;

    import banking.logincabinet.Window;

    public class WindowFactory {
        public Window getCabinet(boolean logged){

            if(logged == true){
                return new LoggedWindow();
            }
            if(logged == false){
                return new LogingWindow();
            }

            return null;
        }
    }
  learner_created: true
- name: src/banking/database/Database.java
  visible: true
  text: |
    package banking.database;

    import banking.account.Account;
    import org.sqlite.SQLiteDataSource;

    import java.sql.*;
    import java.util.ArrayList;

    public class Database {

        private static ArrayList<Account> accountsBase = new ArrayList<Account>();
        private static String url;


        public Database() { }
        public Database(String url) {
            this.url = url;
        }

        /*
        public boolean ifCardExist(String cardNumber){
            boolean exist = false;

            for (int i = 0; i < accountsBase.size(); i++){
                if(cardNumber.equals(accountsBase.get(i).getCardNumber())){
                    exist = true;
                }
            }
            return exist;
        }
        public void addAccount(Account acc) {
            accountsBase.add(acc);
        }
        public String getPinByCardNumber(String crdNum){
            String tmp = null;
            for (int i = 0; i < accountsBase.size(); i++){
                if(crdNum.equals(accountsBase.get(i).getCardNumber())){
                    tmp = accountsBase.get(i).getPinCode();
                }
            }
            return tmp;
        }
        public Account getAccountByCardNumber(String cardNumber) {
            Account output = null;
            for (int i = 0; i < accountsBase.size(); i++){
                if(cardNumber.equals(accountsBase.get(i).getCardNumber())){
                    output = accountsBase.get(i);
                }
            }
            return output;
        }
        */

        public void createDBSQlite() {
            //String url = "jdbc:sqlite:D:\\Java\\HyperSkill Projects\\Simple Banking System\\Simple-Banking-System\\Simple Banking System\\task\\src\\banking\\TEST.db";

            SQLiteDataSource dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            try (Connection con = dataSource.getConnection()) {
                // Statement creation
                try (Statement statement = con.createStatement()) {
                    // Statement execution
                    statement.executeUpdate("CREATE TABLE IF NOT EXISTS card(" +
                            "id INTEGER PRIMARY KEY," +
                            "number TEXT," +
                            "pin TEXT," +
                            "balance INTEGER DEFAULT 0)");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public void saveToDBSQlite(Account account){

            String insert = "INSERT INTO card (number, pin, balance) VALUES (?, ?, ?)";

            //String url = "jdbc:sqlite:D:\\Java\\HyperSkill Projects\\Simple Banking System\\Simple-Banking-System\\Simple Banking System\\task\\src\\banking\\TEST.db";
            SQLiteDataSource dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            try (Connection con = dataSource.getConnection()) {
                try (PreparedStatement preparedStatement = con.prepareStatement(insert)) {
                    preparedStatement.setString(1, account.getCardNumber());
                    preparedStatement.setString(2, account.getPinCode());
                    preparedStatement.setInt(3, account.getBalance());
                    preparedStatement.executeUpdate();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public Account getAccountByCardNumberSQlite(String cardNumber) {
            Account output = new Account();

            String get = "SELECT pin, balance FROM card WHERE number = ?";

            //String url = "jdbc:sqlite:D:\\Java\\HyperSkill Projects\\Simple Banking System\\Simple-Banking-System\\Simple Banking System\\task\\src\\banking\\TEST.db";
            SQLiteDataSource dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            try (Connection con = dataSource.getConnection()) {
                try (PreparedStatement preparedStatement = con.prepareStatement(get)) {

                    preparedStatement.setString(1, cardNumber);
                    ResultSet resultSet = preparedStatement.executeQuery();

                    //output.setCardNumber(resultSet.getString("number"));
                    output.setCardNumber(cardNumber);
                    output.setPinCode(resultSet.getString("pin"));
                    output.setBalance(resultSet.getInt("balance"));

                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return output;
        }

        public String getPinByCardNumberSQlite(String cardNumber){

            String tmp = null;

            String get = "SELECT pin FROM card WHERE number = ?";

            //String url = "jdbc:sqlite:D:\\Java\\HyperSkill Projects\\Simple Banking System\\Simple-Banking-System\\Simple Banking System\\task\\src\\banking\\TEST.db";
            SQLiteDataSource dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            try (Connection con = dataSource.getConnection()) {
                try (PreparedStatement preparedStatement = con.prepareStatement(get)) {

                    preparedStatement.setString(1, cardNumber);
                    ResultSet resultSet = preparedStatement.executeQuery();

                    tmp = resultSet.getString("pin");

                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return tmp;
        }

        public boolean ifCardExistSQlite(String cardNumber){
            boolean exist = false;

            String get = "SELECT pin FROM card WHERE number = ?";

            //String url = "jdbc:sqlite:D:\\Java\\HyperSkill Projects\\Simple Banking System\\Simple-Banking-System\\Simple Banking System\\task\\src\\banking\\TEST.db";
            SQLiteDataSource dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            try (Connection con = dataSource.getConnection()) {
                try (PreparedStatement preparedStatement = con.prepareStatement(get)) {

                    preparedStatement.setString(1, cardNumber);
                    ResultSet resultSet = preparedStatement.executeQuery();
                    if (resultSet.next() != false) {
                        exist = true;
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            return exist;
        }

        public int getBalanceSQlite(Account account){
            int balance = 0;

            String get = "SELECT balance FROM card WHERE number = ?";

            //String url = "jdbc:sqlite:D:\\Java\\HyperSkill Projects\\Simple Banking System\\Simple-Banking-System\\Simple Banking System\\task\\src\\banking\\TEST.db";
            SQLiteDataSource dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            try (Connection con = dataSource.getConnection()) {
                try (PreparedStatement preparedStatement = con.prepareStatement(get)) {

                    preparedStatement.setString(1, account.getCardNumber());
                    ResultSet resultSet = preparedStatement.executeQuery();

                    balance = resultSet.getInt("balance");

                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return balance;
        }
    }
  learner_created: true
- name: src/banking/datavalidation/InputDataValidation.java
  visible: true
  text: |
    package banking.datavalidation;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class InputDataValidation {

        public InputDataValidation() {
        }

        public boolean isValidPinCode(String pinCode)
        {

            // Regex to check valid pin code of India.
            String regex
                    = "^[0-9]{4}$";

            // Compile the ReGex
            Pattern p = Pattern.compile(regex);

            // If the pin code is empty
            // return false
            if (pinCode == null) {
                return false;
            }

            // Pattern class contains matcher() method
            // to find matching between given pin code
            // and regular expression.
            Matcher m = p.matcher(pinCode);

            // Return if the pin code
            // matched the ReGex
            return m.matches();
        }

        public boolean isValidCardNumber(String cardNumber)
        {

            // Regex to check valid pin code of India.
            String regex
                    = "^[0-9]{16}$";

            // Compile the ReGex
            Pattern p = Pattern.compile(regex);

            // If the pin code is empty
            // return false
            if (cardNumber == null) {
                return false;
            }

            // Pattern class contains matcher() method
            // to find matching between given pin code
            // and regular expression.
            Matcher m = p.matcher(cardNumber);

            // Return if the pin code
            // matched the ReGex
            return m.matches();
        }

    }
  learner_created: true
- name: src/banking/logincabinet/Window.java
  visible: true
  text: |
    package banking.logincabinet;

    public interface Window {
        void ShowDialog();
    }
  learner_created: true
- name: src/banking/account/Account.java
  visible: true
  text: |+
    package banking.account;

    import banking.database.Database;
    import java.util.Random;

    public class Account {

        private String pinCode;
        private String cardNumber;
        private int balance;
        Database db;

        public Account() {
            db = new Database();
        }

        public void setBalance(int balance) {
            this.balance = balance;
        }

        public void setPinCode(String pinCode) {
            this.pinCode = pinCode;
        }

        public void setCardNumber(String cardNumber) {
            this.cardNumber = cardNumber;
        }

        public String getPinCode() {
            return pinCode;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public int getBalance() {
            return balance;
        }

        public void createCard(){
            createCardNumber();
            createPinCode();
            balance = 0;
        }

        //in a range from 0000 to 9999
        private void createPinCode(){
            Random random = new Random();
            int temppin = random.nextInt(10000);
            pinCode = String.format("%04d", temppin);
        }

        private void createCardNumber(){
            do{
                cardNumber = gererateLuhnCardNumber();
            //} while(db.ifCardExist(cardNumber));
            } while(db.ifCardExistSQlite(cardNumber));
        }

        private String gererateLuhnCardNumber (){
            Random random = new Random();
            String tmp = "";
            int сheckSum = 0;
            for (int i = 0; i < 9; i++) {
                tmp = tmp + random.nextInt(10);
            }
            tmp = "400000" + tmp; //15 чисел. Надо найти сумму после применения алгоритма

            boolean isOdd = true;
            int nSum = 0;
            for (int i = 14; i >= 0; i--){
                int d = tmp.charAt(i) - '0';
                if (isOdd == true)
                    d = d * 2;
                // We add two digits to handle
                // cases that make two digits
                // after doubling
                nSum += d / 10;
                nSum += d % 10;

                isOdd = !isOdd;
            }
            if (nSum % 10 == 0) {
                сheckSum = 0;
            }
            else {
                сheckSum = (9- (nSum % 10)) + 1;
            }
            tmp = tmp + String.valueOf(сheckSum);
            return tmp;
        }
    }


  learner_created: true
- name: src/banking/logincabinet/dataonscreen/LogingWindow.java
  visible: true
  text: |
    package banking.logincabinet.dataonscreen;

    import banking.Main;
    import banking.account.Account;
    import banking.database.Database;
    import banking.datavalidation.InputDataValidation;
    import banking.logincabinet.Window;

    import java.util.Scanner;

    public class LogingWindow implements Window {

        public LogingWindow() {
        }

        @Override
        public void ShowDialog() {

            Scanner sc = new Scanner(System.in);
            Database db = new Database();
            InputDataValidation validation = new InputDataValidation();

            outerloop:
            while(true) {
                System.out.println("1. Create an account");
                System.out.println("2. Log into account");
                System.out.println("0. Exit");

                int option = sc.nextInt();

                switch (option) {
                    case 1:
                        //Создаем аккаунт - в нем пин код и баланс = 0
                        Account account = new Account();
                        account.createCard();
                        //db.addAccount(account);
                        db.saveToDBSQlite(account);
                        System.out.println("Your card has been created");
                        System.out.println("Your card number:");
                        System.out.println(account.getCardNumber());
                        System.out.println("Your card PIN:");
                        System.out.println(account.getPinCode());
                        break;

                    case 2:
                        boolean isOk = false;
                        System.out.println("Enter your card number:");
                        String inputCardNumber = sc.next();
                        System.out.println("Enter your PIN:");
                        String inputCardPin = sc.next();

                        if (validation.isValidPinCode(inputCardPin) && validation.isValidCardNumber(inputCardNumber)) {
                            //if(db.ifCardExist(inputCardNumber)){
                            if(db.ifCardExistSQlite(inputCardNumber)){
                                if (db.getPinByCardNumberSQlite(inputCardNumber).equals(inputCardPin))
                                    isOk = true;

                            }
                        }
                        if (isOk) {
                            System.out.println("You have successfully logged in!");
                            //Main.enteredaccount = db.getAccountByCardNumber(inputCardNumber);
                            Main.enteredaccount = db.getAccountByCardNumberSQlite(inputCardNumber);
                            Main.logged = true;
                            break outerloop;
                        }
                        else {
                            System.out.println("Wrong card number or PIN!");
                        }
                        break;

                    case 0:
                        System.out.println("Bye!");
                        System.exit(0);

                }
            }
        }
    }
  learner_created: true
- name: src/banking/logincabinet/dataonscreen/LoggedWindow.java
  visible: true
  text: |
    package banking.logincabinet.dataonscreen;

    import banking.Main;
    import banking.database.Database;
    import banking.logincabinet.Window;

    import java.util.Scanner;

    public class LoggedWindow implements Window {

        public LoggedWindow() {
        }

        @Override
        public void ShowDialog() {

            Scanner sc = new Scanner(System.in);
            Database db = new Database();

            outerloop:
            while(true) {
                System.out.println("1. Balance");
                System.out.println("2. Log out");
                System.out.println("0. Exit");

                int option = sc.nextInt();

                switch (option) {

                    case 1:
                        //System.out.println(Main.enteredaccount.getBalance());
                        System.out.println(db.getBalanceSQlite(Main.enteredaccount));
                        break;
                    case 2:
                        Main.logged = false;
                        Main.enteredaccount = null;
                        break outerloop;
                    case 0:
                        System.out.println("Bye!");
                        System.exit(0);
                }
            }
        }
    }
  learner_created: true
- name: src/banking/response/Response.java
  visible: true
  learner_created: true
- name: src/banking/TEST.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 11 May 2021 13:17:22 UTC
record: -1
